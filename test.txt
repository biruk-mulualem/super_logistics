<div class="table-section">
  <style>
    .modal-actions button {
      padding: 6px 12px;
      margin-right: 5px;
      border-radius: 4px;
      border: 1px solid;
      color: white;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .btn-detail { border-color: #264ea5; background-color: #264ea5; color: black; }
    .btn-detail.active { background-color: #28a745; }

    .btn-edit { border-color: #264ea5; background-color: #264ea5; }
    .btn-edit.active { background-color: #28a745; }

    .btn-payment { border-color: #264ea5; background-color: #264ea5; }
    .btn-payment.active { background-color: #28a745; }

    .btn-delete { border-color: #264ea5; background-color: #264ea5; }
    .btn-delete.active { background-color: #28a745; }
  </style>

  <div class="container">
    <input
      type="text"
      [(ngModel)]="searchQuery"
      (input)="onSearch()"
      class="search-input"
      placeholder="Search..." />

    <button
      *ngIf="buttonVisibility.add"
      class="add-btn"
      title="Add"
      (click)="openAddModal()">
      <i class="fas fa-plus"></i>
    </button>
  </div>

  <!-- Table -->
  <div class="table-wrapper">
    <table>
      <thead>
        <tr>
          <th *ngFor="let header of headers">{{ header.label }}</th>
          <th *ngIf="hasAnyActionButton()">Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let row of paginatedData">
          <td *ngFor="let header of headers" [attr.data-label]="header.label">{{
            row[header.key] }}</td>
          <td *ngIf="hasAnyActionButton()" data-label="Actions">
            <div class="action-buttons">
              <button
                *ngIf="buttonVisibility.detail || buttonVisibility.edit || buttonVisibility.payment || buttonVisibility.delete"
                class="detail-btn"
                (click)="openMainModal(row)">
                <i class="fas fa-eye"></i>
              </button>
            </div>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <!-- Pagination -->
  <div class="pagination">
    <button class="page-btn" (click)="prevPage()"
      [disabled]="currentPage === 1">&lt;</button>
    <button
      class="page-btn"
      *ngFor="let page of [].constructor(totalPages); let i = index"
      [class.active]="currentPage === i + 1"
      (click)="setPage(i + 1)">
      {{ i + 1 }}
    </button>
    <button class="page-btn" (click)="nextPage()"
      [disabled]="currentPage === totalPages">&gt;</button>
  </div>
</div>

<!-- ================= ADD MODAL ================= -->
<div class="modal" *ngIf="showModal.add" (click)="closeModal('add')">
  <div class="modal-content" (click)="$event.stopPropagation()">

    <!-- ================= ADD MODAL (Intransit) ================= -->
    <ng-container *ngIf="pageType === 'intransit'">

      <!-- Modal Header -->
      <div class="modal-header">
        <h3>Add Intransit Entry</h3>
      </div>
      <hr>

      <!-- Add Item Button -->
      <div class="modal-buttons"
        style="display: flex; gap: 10px; align-items: center;">
        <button (click)="addItem('add')" class="btn btn-success">+ Add
          Item</button>
      </div>

      <!-- Item Rows -->
      <div *ngFor="let item of addData.items; let i = index" class="item-row">
        <div class="modal-input-group">
          <label>Item Description</label>
          <input type="text" [(ngModel)]="item.itemDescription" />
        </div>

        <div class="modal-input-group">
          <label>UOM</label>
          <select [(ngModel)]="item.uom" required>
            <option *ngFor="let u of uoms" [value]="u">{{ u }}</option>
          </select>
        </div>

        <div class="modal-input-group">
          <label>Quantity</label>
          <input type="number" [(ngModel)]="item.quantity" />
        </div>

        <div class="modal-input-group">
          <label>Unit Price</label>
          <input type="number" [(ngModel)]="item.unitPrice" />
        </div>

        <div class="modal-input-group remove-btn">
          <button type="button" (click)="removeItem('add', i)"
            [disabled]="i === 0">X</button>
        </div>
      </div>

      <hr>

      <!-- Main Form Fields -->
      <div class="modal-form">
        <div class="modal-input-group">
          <label>Purchase Order</label>
          <input type="text" [(ngModel)]="addData.purchaseOrder" />
        </div>

        <div class="modal-input-group">
          <label>Purchase Date</label>
          <input type="date" [(ngModel)]="addData.purchaseDate" />
        </div>

        <div class="modal-input-group">
          <label>Origin</label>
          <select [(ngModel)]="addData.origin" required>
            <option *ngFor="let o of origins" [value]="o">{{ o | titlecase
              }}</option>
          </select>
        </div>

        <div class="modal-input-group">
          <label>Purchase Company</label>
          <input type="text" [(ngModel)]="addData.purchaseCompany" />
        </div>

        <div class="modal-input-group">
          <label>Contact Person</label>
          <input type="text" [(ngModel)]="addData.contactPerson" />
        </div>

        <div class="modal-input-group">
          <label>Remark</label>
          <textarea [(ngModel)]="addData.remark"></textarea>
        </div>
      </div>

      <hr>

      <!-- Modal Actions -->
      <div class="modal-buttons"
        style="margin-top: 10px; display: flex; gap: 10px;">
        <button (click)="saveAddClick()" class="btn btn-primary">Save</button>
        <button (click)="closeModal('add')"
          class="btn btn-secondary">Cancel</button>
      </div>

    </ng-container>
    <!-- ================= ADD MODAL (Logistics) ================= -->
    <ng-container *ngIf="pageType === 'logistics'">

      <!-- Modal Header -->
      <div class="modal-header">
        <h3>Add logistics Entry</h3>
      </div>
      <hr>

      <!-- Add Item Button -->
      <div class="modal-buttons"
        style="display: flex; gap: 10px; align-items: center;">
        <button (click)="addItem('add')" class="btn btn-success">+ Add
          Item</button>
      </div>

      <!-- Item Rows -->
      <div *ngFor="let item of addData.items; let i = index" class="item-row">
        <div class="modal-input-group">
          <label>Reference Number</label>
          <select [(ngModel)]="item.transactionId">
            <option value="SDT000001">SDT000001</option>
            <option value="SDT000002">SDT000002</option>
            <option value="SDT000003">SDT000003</option>
            <option value="SDT000004">SDT000004</option>
            <option value="SDT000005">SDT000005</option>
            <option value="SDT000006">SDT000006</option>
            <option value="SDT000007">SDT000007</option>
            <option value="SDT000008">SDT000008</option>
            <option value="SDT000009">SDT000009</option>
            <option value="SDT000010">SDT000010</option>
          </select>
        </div>

        <div class="modal-input-group">
          <label>Item</label>
          <select [(ngModel)]="item.itemDescription">
            <option value="Item 1">Item 1</option>
            <option value="Item 2">Item 2</option>
            <option value="Item 3">Item 3</option>
            <option value="Item 4">Item 4</option>
            <option value="Item 5">Item 5</option>
            <option value="Item 6">Item 6</option>
            <option value="Item 7">Item 7</option>
            <option value="Item 8">Item 8</option>
            <option value="Item 9">Item 9</option>
            <option value="Item 10">Item 10</option>
          </select>
        </div>

        <div class="modal-input-group">
          <label>UOM</label>
          <select [(ngModel)]="item.uom" required>
            <option value="mg">mg</option>
            <option value="g">g</option>
            <option value="kg">kg</option>
            <option value="ton">ton</option>
            <option value="lb">lb</option>
            <option value="oz">oz</option>

            <option value="reel">reel</option>
            <option value="sheet_metal">sheet_metal</option>
            <option value="roll_fabric">roll_fabric</option>
            <option value="drum">drum</option>
          </select>
        </div>

        <div class="modal-input-group">
          <label>Loaded Amount</label>
          <input type="number" [(ngModel)]="item.LoadedQnty" />
        </div>

        <div class="modal-input-group remove-btn">
          <button type="button" (click)="removeItem('add', i)"
            [disabled]="i === 0">X</button>
        </div>
      </div>

      <hr>

      <!-- Main Form Fields -->
      <div class="modal-form">
        <div class="modal-input-group">
          <label>No-Cont</label>
          <input type="number" [(ngModel)]="addData.purchaseOrder" />
        </div>

        <div class="modal-input-group">
          <label>Cont-Type</label>
          <select [(ngModel)]="addData.purchaseDate" required>
            <option value="20ft">20ft</option>
            <option value="40ft">40ft</option>
            <option value="40ft_HC">40ft HC</option>
            <option value="45ft_HC">45ft HC</option>
          </select>
        </div>

        <div class="modal-input-group">
          <label>Remark</label>
          <textarea [(ngModel)]="addData.remark"></textarea>
        </div>
      </div>

      <hr>

      <!-- Modal Actions -->
      <div class="modal-buttons"
        style="margin-top: 10px; display: flex; gap: 10px;">
        <button (click)="saveAddClick()" class="btn btn-primary">Save</button>
        <button (click)="closeModal('add')"
          class="btn btn-secondary">Cancel</button>
      </div>

    </ng-container>
  </div>
</div>
<!-- ================= MAIN MODAL ================= -->
<div class="modal" *ngIf="showModal.main" (click)="closeModal('main')">
  <div class="modal-content" (click)="$event.stopPropagation()">

    <!-- Modal Actions -->
    <div class="modal-actions">
      <h3 class="main-modal-title">
        {{ pageType === 'intransit' ? 'Intransit' : 'Logistics' }} Main Modal
      </h3>

      <button class="btn-detail"
        *ngIf="buttonVisibility.detail"
        [class.active]="activeTab === 'detail'"
        (click)="setActiveTab('detail')">Detail</button>

      <button class="btn-edit"
        *ngIf="buttonVisibility.edit"
        [class.active]="activeTab === 'edit'"
        (click)="setActiveTab('edit')">Edit</button>

      <button class="btn-payment"
        *ngIf="buttonVisibility.payment"
        [class.active]="activeTab === 'payment'"
        (click)="setActiveTab('payment')">Payment</button>

      <button class="btn-delete"
        *ngIf="buttonVisibility.delete"
        [class.active]="activeTab === 'delete'"
        (click)="setActiveTab('delete')">Delete</button>
    </div>
    <hr />
    <!-- Modal Body -->
    <div class="main-modal-body">
      <!-- DETAIL TAB -->
      <ng-container *ngIf="activeTab === 'detail' && buttonVisibility.detail">
        <ng-container *ngIf="pageType === 'intransit'">
          <span>Product Detail</span>
          <div *ngIf="selectedRow?.items?.length; else noItems">
            <div *ngFor="let item of selectedRow.items" class="detail-row">
              <div class="detail-item"><span class="label">Item:</span> <span
                  class="value">{{item.itemDescription}}</span></div>
              <div class="detail-item"><span class="label">Quantity:</span>
                <span class="value">{{item.quantity}}</span></div>
              <div class="detail-item"><span class="label">Uom:</span> <span
                  class="value">{{item.uom}}</span></div>
              <div class="detail-item"><span class="label">U.Price:</span> <span
                  class="value">{{item.unitPrice}}</span></div>
            </div>
          </div>
          <ng-template #noItems>
            <p>No product details available.</p>
          </ng-template>

          <span>Common Data</span>
          <div class="detail-row">
            <div class="detail-item"><span class="label">GRN:</span>
              <span class="value">{{selectedRow?.grn}}</span></div>
            <div class="detail-item"><span class="label">Purchase
                Company:</span> <span
                class="value">{{selectedRow?.purchaseCompany}}</span></div>
          </div>
          <div class="detail-row">
            <div class="detail-item"><span class="label">Origin:</span> <span
                class="value">{{selectedRow?.origin}}</span></div>
            <div class="detail-item"><span class="label">Contact
                Person:</span> <span
                class="value">{{selectedRow?.contactPerson}}</span></div>
          </div>
          <div class="detail-row">
            <div class="detail-item"><span class="label">Remark:</span> <span
                class="value">{{selectedRow?.remark}}</span></div>
          </div>

          <hr>
          <span>Payment History</span>
          <div *ngIf="paymentTerms?.length; else noPayments">
            <div *ngFor="let payment of paymentTerms" class="detail-row">
              <div class="detail-item"><span class="label">Date:</span> <span
                  class="value">{{payment.paidDate}}</span></div>
              <div class="detail-item"><span class="label">Amount:</span> <span
                  class="value">{{payment.amountPaid}}</span></div>
              <div class="detail-item"><span class="label">Paid
                  By:</span> <span class="value">{{payment.paidBy}}</span></div>
              <div class="detail-item"><span class="label">Account:</span> <span
                  class="value">{{payment.accountPaidFrom}}</span></div>
            </div>
          </div>
          <ng-template #noPayments>
            <p>No payment records available.</p>
          </ng-template>

          <div class="modal-buttons">
            <button (click)="closeModal()"
              class="btn btn-secondary">Close</button>
          </div>
        </ng-container>
        <ng-container *ngIf="pageType === 'logistics'">
          <span>Logistics Detail Content</span>
        </ng-container>
      </ng-container>
      <!-- EDIT TAB -->
      <ng-container *ngIf="activeTab === 'edit' && buttonVisibility.edit">
        <ng-container *ngIf="pageType === 'intransit'">
          <span>Product Detail</span>
          <div *ngFor="let item of editData.items; let i = index"
            class="detail-row">
            <div class="modal-form">
              <div class="modal-input-group">
                <label>Item:</label>
                <input type="text" [(ngModel)]="item.itemDescription"
                  required />
              </div>
            </div>
            <div class="modal-form">
              <div class="modal-input-group">
                <label>Quantity:</label>
                <input type="number" [(ngModel)]="item.quantity" required />
              </div>
            </div>
            <div class="modal-input-group">
              <label>UOM</label>
              <select [(ngModel)]="item.uom" required>
                <option *ngFor="let u of uoms" [value]="u">{{ u
                  }}</option>
              </select>
            </div>

            <div class="modal-form">
              <div class="modal-input-group">
                <label>U.Price:</label>
                <input type="number" [(ngModel)]="item.unitPrice" required />
              </div>
            </div>
          </div>

          <hr>
          <span>Common Data</span>
          <div class="modal-form">
            <div class="modal-input-group">
              <label>Purchase Date:</label>
              <input type="date" [(ngModel)]="editData.purchaseDate" required />
            </div>
            <div class="modal-input-group">
              <label>Purchase Order:</label>
              <input type="text" [(ngModel)]="editData.purchaseOrder"
                required />
            </div>
            <div class="modal-input-group">
              <label>Purchase Company:</label>
              <input type="text" [(ngModel)]="editData.purchaseCompany"
                required />
            </div>
            <div class="modal-input-group">
              <label>Origin:</label>
              <select [(ngModel)]="editData.origin" required>
                <option *ngFor="let o of origins" [value]="o">{{
                  o | titlecase }}</option>
              </select>
            </div>

            <div class="modal-input-group">
              <label>GRN:</label>
              <input type="text" [(ngModel)]="editData.grn" required />
            </div>
            <div class="modal-input-group">
              <label>Contact Person:</label>
              <input type="text" [(ngModel)]="editData.contactPerson"
                required />
            </div>
            <div class="modal-input-group full-width">
              <label>Remark:</label>
              <textarea [(ngModel)]="editData.remark"></textarea>
            </div>
          </div>

          <hr>
          <span>Payment Detail</span>
          <div *ngFor="let payment of editData.payments; let i = index"
            class="detail-row">
            <div class="modal-form">
              <div class="modal-input-group">
                <label>Amount Paid:</label>
                <input type="number" [(ngModel)]="payment.amountPaid"
                  required />
              </div>
            </div>
            <div class="modal-form">
              <div class="modal-input-group">
                <label>Paid By:</label>
                <input type="text" [(ngModel)]="payment.paidBy" required />
              </div>
            </div>
            <div class="modal-form">
              <div class="modal-input-group">
                <label>Account Paid From:</label>
                <input type="text" [(ngModel)]="payment.accountPaidFrom"
                  required />
              </div>
            </div>
            <div class="modal-form">
              <div class="modal-input-group">
                <label>Paid Date:</label>
                <input type="date" [(ngModel)]="payment.paidDate" required />
              </div>
            </div>

          </div>

          <div class="modal-buttons">
            <button (click)="saveEditClick();  closeModal()"
              class="btn btn-primary">Save Changes</button>
            <button (click)="closeModal()"
              class="btn btn-secondary">Cancel</button>
          </div>
        </ng-container>
        <ng-container *ngIf="pageType === 'logistics'">
          <span>Edit Logistics Data</span>
        </ng-container>
      </ng-container>

      <!-- PAYMENT TAB -->
      <ng-container *ngIf="activeTab === 'payment' && buttonVisibility.payment">

        <ng-container *ngIf="pageType === 'intransit'">
          <div class="modal-header">
            <h3>Add Payment for {{ selectedRow?.transactionId }}
            </h3>

          </div>

          <div class="modal-buttons" style="margin-bottom: 10px;">
            <button class="btn btn-success" (click)="addPaymentRow()">+ Add
              Payment</button>
          </div>

          <div *ngFor="let payment of newPayments; let j = index"
            class="payment-row"
            style="display: flex; gap: 10px; align-items: center; margin-bottom: 10px;">
            <div class="modal-input-group" style="flex: 1">
              <label>Amount Paid:</label>
              <input type="number" [(ngModel)]="payment.amountPaid" required />
            </div>
            <div class="modal-input-group" style="flex: 1">
              <label>Paid By:</label>
              <input type="text" [(ngModel)]="payment.paidBy" required />
            </div>
            <div class="modal-input-group" style="flex: 1">
              <label>Account Paid From:</label>
              <input type="text" [(ngModel)]="payment.accountPaidFrom"
                required />
            </div>
            <div class="modal-input-group" style="flex: 1">
              <label>Payment Date:</label>
              <input type="date" [(ngModel)]="payment.paidDate" required />
            </div>
            <div class="modal-buttons">
              <button class="btn btn-danger" (click)="removePaymentRow(j)"
                [disabled]="j===0">X</button>
            </div>
          </div>

          <div class="modal-buttons"
            style="margin-top:10px; display:flex; gap:10px;">
            <button class="btn btn-primary"
              (click)="submitPayments(); closeModal()">Save</button>
            <button class="btn btn-secondary"
              (click)="closeModal()">Cancel</button>
          </div>
        </ng-container>
        <ng-container *ngIf="pageType === 'logistics'">
          <p>Logistics Payment Form goes here</p>
        </ng-container>
      </ng-container>

      <!-- DELETE TAB -->
      <ng-container *ngIf="activeTab === 'delete' && buttonVisibility.delete">
        <ng-container *ngIf="pageType === 'intransit'">
          <p>Are you sure you want to delete transaction:
            {{selectedRow?.transactionId}}?
          </p>
          <div class="modal-buttons">
            <button class="btn btn-danger"
              (click)="confirmDeleteClick(); closeModal()">Delete</button>
            <button class="btn btn-secondary"
              (click)="closeModal()">Cancel</button>
          </div>
        </ng-container>
        <ng-container *ngIf="pageType === 'logistics'">
          <p>Are you sure you want to delete this Logistics transaction: {{
            selectedRow?.transactionId }}?</p>
          <div class="modal-buttons">
            <button class="btn btn-danger"
              (click)="confirmDeleteClick(); closeModal('main')">Delete</button>
            <button class="btn btn-secondary"
              (click)="closeModal('main')">Cancel</button>
          </div>
        </ng-container>
      </ng-container>
    </div>
  </div>
</div>













import {
  Component,
  Input,
  Output,
  EventEmitter,
  OnInit,
  OnChanges,
  SimpleChanges,
  HostListener,
  Inject,
  PLATFORM_ID,
  ChangeDetectorRef,
} from '@angular/core';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router, NavigationEnd } from '@angular/router';
import { filter } from 'rxjs/operators';
import { IntransitFollowupService } from '../../../services/intransit-followup.service';

@Component({
  imports: [CommonModule, FormsModule],
  selector: 'app-reusable-table',
  templateUrl: './reusable-table.html',
  styleUrls: ['./reusable-table.css'],
})
export class ReusableTable implements OnInit, OnChanges {
  // ============================================================
  // ---------------------- Inputs / Outputs -------------------
  // ============================================================
  @Input() headers: { label: string; key: string }[] = [];
  @Input() data: any[] = [];
  @Input() detailRow: any;
  @Input() paymentTerms: any[] = [];
  @Input() editData: any = {};
  @Input() showEditModal: boolean = false;

  @Output() add = new EventEmitter<any>();
  @Output() edit = new EventEmitter<any>();
  @Output() delete = new EventEmitter<any>();
  @Output() addPayment = new EventEmitter<any>();

  // ============================================================
  // ---------------- Table & Pagination -----------------------
  // ============================================================
  filteredData: any[] = [];
  searchQuery: string = '';
  currentPage: number = 1;
  rowsPerPage: number = 13;

  // ============================================================
  // ---------------------- Modals -----------------------------
  // ============================================================
  showModal = {
    add: false,
    edit: false,
    delete: false,
    detail: false,
    payment: false,
    main: false,
  };

  selectedRow: any = null;   // unified selected row
  newPayments: any[] = [];
  addData: any = {};
  deleteRowData: any = null;
  activeTab: string = 'detail'; // main modal default tab

  // ============================================================
  // ------------------------ Constants ------------------------
  // ============================================================
  uoms: string[] = [
    'mg', 'g', 'kg', 'ton', 'lb', 'oz', 'ml', 'l', 'pcs', 'box', 'roll', 'pack',
    'dozen', 'set', 'bottle', 'can', 'bag', 'sheet', 'meter', 'cm', 'inch',
    'yard', 'sqft', 'sqm', 'gallon', 'quart', 'pint', 'fluid_oz', 'tube',
    'carton', 'crate', 'pail', 'jar', 'packaging_unit', 'bundle', 'lot', 'pair',
    'reel', 'sheet_metal', 'roll_fabric', 'drum'
  ];

  origins: string[] = [
    'china', 'india', 'usa', 'germany', 'japan', 'south_korea', 'france', 'uk',
    'italy', 'canada', 'mexico', 'brazil', 'russia', 'turkey', 'australia',
    'singapore', 'netherlands', 'belgium', 'switzerland', 'uae', 'thailand',
    'vietnam', 'malaysia', 'indonesia'
  ];

  isBrowser: boolean;
  pageType: string | null = null;
  buttonVisibility = {
    add: true,
    edit: true,
    delete: true,
    detail: true,
    payment: true,
  };

  routeConfigs = [
    { match: '/intransit', pageType: 'intransit', add: true, edit: true, delete: true, detail: true, payment: true },
    { match: '/logistics', pageType: 'logistics', add: true, edit: true, delete: true, detail: true, payment: false },
    { match: '/reports', pageType: 'reports', add: false, edit: true, delete: false, detail: true, payment: false },
    { match: '/history', pageType: 'history', add: false, edit: false, delete: false, detail: true, payment: false },
    { match: '/donelogistics', pageType: 'donelogisticshistory', add: false, edit: false, delete: false, detail: true, payment: false },
    { match: '/doneintransit', pageType: 'doneintransithistory', add: false, edit: false, delete: false, detail: true, payment: false },
    { match: '/cancelledintransit', pageType: 'cancelledintransithistory', add: false, edit: false, delete: false, detail: true, payment: false },
    { match: '/cancelledlogistics', pageType: 'cancelledlogisticshistory', add: false, edit: false, delete: false, detail: true, payment: false },
  ];

  // ============================================================
  // ---------------------- Constructor ------------------------
  // ============================================================
  constructor(
    @Inject(PLATFORM_ID) private platformId: Object,
    public router: Router,
    public intransitService: IntransitFollowupService,
    private cdr: ChangeDetectorRef
  ) {
    this.isBrowser = isPlatformBrowser(this.platformId);

    // Update page type & buttons on route change
    this.router.events
      .pipe(filter((e) => e instanceof NavigationEnd))
      .subscribe(() => {
        this.updatePageTypeAndButtons();
      });
  }

  // ============================================================
  // ---------------------- Lifecycle Hooks --------------------
  // ============================================================
  ngOnInit(): void {
    this.filteredData = [...this.data];
    if (this.isBrowser) this.setRowsPerPage(window.innerWidth);
    this.applyFilterAndPagination();
    this.updatePageTypeAndButtons();
  }

  ngOnChanges(changes: SimpleChanges): void {
    this.applyFilterAndPagination();

    if (changes['detailRow'] && this.detailRow) {
      this.selectedRow = this.detailRow;
      this.openModal('detail', this.detailRow);
      this.fetchPayments(this.detailRow.transactionId);
    }
  }

  // ============================================================
  // ---------------------- Window Resize ----------------------
  // ============================================================
  @HostListener('window:resize', ['$event'])
  onResize(event: any) {
    if (this.isBrowser) this.setRowsPerPage(event.target.innerWidth);
  }

  private setRowsPerPage(width: number) {
    this.rowsPerPage = width <= 480 ? 1 : 13;
    this.currentPage = 1;
  }

  // ============================================================
  // ---------------------- Pagination -------------------------
  // ============================================================
  get paginatedData(): any[] {
    const start = (this.currentPage - 1) * this.rowsPerPage;
    return this.filteredData.slice(start, start + this.rowsPerPage);
  }

  get totalPages(): number {
    return Math.ceil(this.filteredData.length / this.rowsPerPage);
  }

  setPage(page: number) {
    this.currentPage = page;
  }
  prevPage() {
    if (this.currentPage > 1) this.currentPage--;
  }
  nextPage() {
    if (this.currentPage < this.totalPages) this.currentPage++;
  }

  // ============================================================
  // ------------------------- Search --------------------------
  // ============================================================
  onSearch(): void {
    const query = this.searchQuery.toLowerCase();

    const matchesSearch = (value: any): boolean => {
      if (value === null || value === undefined) return false;
      if (typeof value === 'string' || typeof value === 'number')
        return String(value).toLowerCase().includes(query);
      if (Array.isArray(value))
        return value.some((item) => matchesSearch(item));
      if (typeof value === 'object')
        return Object.values(value).some((val) => matchesSearch(val));
      return false;
    };

    this.filteredData = this.data.filter((row) => matchesSearch(row));
    this.currentPage = 1;
  }

  private applyFilterAndPagination() {
    this.onSearch();
    if (this.currentPage > this.totalPages)
      this.currentPage = this.totalPages || 1;
  }

  // ============================================================
  // ------------------ Page / Buttons Logic -------------------
  // ============================================================
  hasAnyActionButton(): boolean {
    return (
      this.buttonVisibility.detail ||
      this.buttonVisibility.edit ||
      this.buttonVisibility.payment ||
      this.buttonVisibility.delete
    );
  }

  private updatePageTypeAndButtons() {
    const currentRoute = this.router.url;
    const config = this.routeConfigs.find((cfg) => currentRoute.includes(cfg.match));
    if (config) {
      this.pageType = config.pageType;
      Object.assign(this.buttonVisibility, {
        add: config.add ?? false,
        edit: config.edit ?? false,
        delete: config.delete ?? false,
        detail: config.detail ?? false,
        payment: config.payment ?? false,
      });
    } else {
      this.pageType = null;
      Object.assign(this.buttonVisibility, {
        add: false,
        edit: false,
        delete: false,
        detail: false,
        payment: false,
      });
    }
  }

  // ============================================================
  // -------------------- Modals & Scroll ----------------------
  // ============================================================
  openModal(modal: keyof typeof this.showModal, row?: any) {
    this.showModal[modal] = true;
    if (row) this.selectedRow = row;
    this.toggleBodyScroll(true);
  }

  closeModal(modal?: keyof typeof this.showModal) {
    if (modal) this.showModal[modal] = false;
    else Object.keys(this.showModal).forEach(
      (key) => (this.showModal[key as keyof typeof this.showModal] = false)
    );
    this.selectedRow = null;
    this.newPayments = [];
    this.toggleBodyScroll(false);
  }

  private toggleBodyScroll(disable: boolean) {
    if (!this.isBrowser) return;
    document.body.classList.toggle('modal-open', disable);
  }

  // ============================================================
  // ------------------------ Payments -------------------------
  // ============================================================
  private fetchPayments(transactionId: string): void {
    this.intransitService.getPaymentData(transactionId).subscribe({
      next: (payments) => {
        this.paymentTerms = payments.length
          ? payments
          : [{ amountPaid: '', paidBy: '', accountPaidFrom: '', paidDate: '' }];
        this.cdr.detectChanges();
      },
      error: () => {
        this.paymentTerms = [{ amountPaid: '', paidBy: '', accountPaidFrom: '', paidDate: '' }];
        this.cdr.detectChanges();
      },
    });
  }

  addPaymentRow(): void {
    this.newPayments.push({ amountPaid: '', paidBy: '', accountPaidFrom: '', paidDate: '' });
  }

  removePaymentRow(index: number): void {
    this.newPayments.splice(index, 1);
  }

  submitPayments(): void {
    if (this.newPayments.some(p =>
      !p.amountPaid || !p.paidBy?.trim() || !p.accountPaidFrom?.trim() || !p.paidDate
    )) {
      alert('Please fill out all required fields before saving.');
      return;
    }

    const transactionId = this.selectedRow?.transactionId;
    if (!transactionId) {
      alert('Missing transaction id');
      return;
    }

    this.addPayment.emit({ transactionId, payments: this.newPayments });
    this.closeModal('payment');
  }

  // ============================================================
  // ------------------------ Add / Edit -----------------------
  // ============================================================
  openAddModal() {
    this.addData = {
      purchaseDate: '',
      purchaseOrder: '',
      purchaseCompany: '',
      contactPerson: '',
      origin: '',
      remark: '',
      items: [{ itemDescription: '', quantity: '', unitPrice: '', uom: '', loadedQnty: '', remainingQnty: '' }],
    };
    this.openModal('add');
  }

  addItem(target: 'add' | 'edit') {
    const arr = target === 'add' ? this.addData.items : this.editData.items;
    arr.push({ itemDescription: '', quantity: '', unitPrice: '', uom: '', loadedQnty: '', remainingQnty: '' });
  }

  removeItem(target: 'add' | 'edit', index: number) {
    const arr = target === 'add' ? this.addData.items : this.editData.items;
    if (arr.length > 1) arr.splice(index, 1);
  }

  saveAddClick(): void {
    const missing: string[] = [];
    const d = this.addData;

    if (!d.purchaseOrder?.trim()) missing.push('Purchase Order');
    if (!d.purchaseDate) missing.push('Purchase Date');
    if (!d.origin?.trim()) missing.push('Origin');
    if (!d.purchaseCompany?.trim()) missing.push('Purchase Company');
    if (!d.contactPerson?.trim()) missing.push('Contact Person');

    d.items.forEach((i: any, idx: number) => {
      if (!i.itemDescription?.trim()) missing.push(`Item #${idx + 1} Description`);
      if (!i.uom?.trim()) missing.push(`Item #${idx + 1} UOM`);
      if (!i.quantity || isNaN(Number(i.quantity))) missing.push(`Item #${idx + 1} Quantity`);
      if (!i.unitPrice || isNaN(Number(i.unitPrice))) missing.push(`Item #${idx + 1} Unit Price`);
      i.loadedQnty = 0;
      i.remainingQnty = Number(i.quantity) || 0;
    });

    if (missing.length > 0) {
      alert('Please fill: ' + missing.join(', '));
      return;
    }

    this.add.emit(d);
    this.closeModal('add');
  }

  openEditModal(row: any) {
    this.editData = JSON.parse(JSON.stringify(row));
    this.openModal('edit', row);
    if (!this.editData.payments) this.editData.payments = [];
  }

  saveEditClick(): void {
    this.edit.emit(this.editData);
    this.closeModal('edit');
  }

  // ============================================================
  // ------------------------- Delete --------------------------
  // ============================================================
  openDeleteModal(row: any) {
    this.selectedRow = row;       
    this.activeTab = 'delete';    
    this.showModal.main = true;   
  }

  confirmDeleteClick(): void {
    if (!this.selectedRow) {
      alert('No row selected!');
      return;
    }
    this.delete.emit(this.selectedRow);  
    this.closeModal('main');             
  }

  // ============================================================
  // ----------------------- Main Modal ------------------------
  // ============================================================
  openMainModal(row: any) {
    this.selectedRow = row;
    this.editData = JSON.parse(JSON.stringify(row));
    this.activeTab = 'detail';
    this.paymentTerms = row.payments ?? [];
    this.openModal('main');
    if (!this.editData.payments) this.editData.payments = [];
  }

  setActiveTab(tab: string) {
    this.activeTab = tab;
    if (tab === 'detail') this.paymentTerms = this.selectedRow?.payments ?? [];
  }
}






























        /* ------------------ Base Layout ------------------ */
    
    .container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
        gap: 0;
    }
    
    .search-input {
        flex: 1 1 100px;
        min-width: 130px;
        max-width: 20%;
        margin: 10px 0 0 10px;
        padding: 8px 14px 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 6px;
        transition: border-color 0.3s ease;
    }
    
    .search-input:focus {
        border-color: #74d9e8;
        outline: none;
    }
    
    .add-btn,
    .edit-btn,
    .delete-btn,
    .detail-btn,
    .payment-btn {
        border: none;
        color: white;
        padding: 8px 10px;
        font-size: 14px;
        border-radius: 6px;
        white-space: nowrap;
        flex-shrink: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }
    
    .add-btn {
        background-color: #5cb85c;
    }
    
    .add-btn:hover {
        background-color: #4cae4c;
    }
    
    .edit-btn {
        background-color: #0eb1f1;
        margin-right: 5px;
    }
    
    .delete-btn {
        background-color: #f73403;
        margin-right: 5px;
    }
    
    .payment-btn {
        background-color: #096ada;
        margin-right: 5px;
    }
    
    .detail-btn {
        background-color: #13f0dd;
        margin-right: 10px;
    }
    
    #plus_button {
        background-color: #41dbf7;
        border: none;
        color: white;
        padding: 1px 10px;
        font-size: 20px;
        border-radius: 6px;
        cursor: pointer;
        width: 20%;
    }
    
    .uom-header {
        display: flex;
        align-items: center;
        gap: 70%;
    }
    
    .main-content {
        margin-left: 150px;
        padding: 5px;
        box-sizing: border-box;
    }
    
    .action-buttons {
        display: flex;
        gap: 0;
    }
    /* ------------------ Table ------------------ */
    
    .table-section {
        background: white;
        padding: 10px;
        border-radius: 2px;
        border: 1px solid #ddd;
        max-width: 100%;
        box-sizing: border-box;
    }
    
    .table-wrapper {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
    }
    
    table {
        width: 100%;
        border-collapse: collapse;
        table-layout: auto;
        font-size: 15px;
    }
    
    thead {
        background-color: #13a0c4;
        font-size: 16px;
        text-align: center;
    }
    
    th,
    td {
        border: 1px solid #ddd;
        white-space: normal;
        word-wrap: break-word;
        padding: 5px;
    }
    
    .table-wrapper td input {
        width: 100%;
        box-sizing: border-box;
        font-size: 10px;
        padding: 2px;
    }
    
    tbody tr:nth-child(odd) {
        background-color: white;
    }
    
    tbody tr:nth-child(even) {
        background-color: #d8d7d7;
    }
    /* ------------------ Pagination ------------------ */
    
    .pagination {
        margin-top: 20px;
        display: flex;
        justify-content: center;
        gap: 8px;
        flex-wrap: wrap;
    }
    
    .page-btn {
        background: #f1f1f1;
        border: 1px solid #ccc;
        border-radius: 6px;
        padding: 6px 14px;
        cursor: pointer;
        font-size: 14px;
        transition: background-color 0.3s ease;
    }
    
    .page-btn:hover:not(:disabled) {
        background-color: #74d9e8;
        color: white;
    }
    
    .page-btn:disabled {
        cursor: not-allowed;
        opacity: 0.5;
    }
    
    .page-btn.active {
        background-color: #337ab7;
        color: white;
        border-color: #286090;
    }
    /* ------------------ Modal ------------------ */
    
    .modal {
        position: fixed;
        inset: 0;
        background: rgba(0, 0, 0, 0.55);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1050;
        padding: 15px;
        box-sizing: border-box;
        overflow-y: auto;
    }
    
    .modal-content {
        background: #fff;
        width: 850px;
        max-width: 90%;
        max-height: 90vh;
        overflow-y: auto;
        padding: 25px;
        border-radius: 14px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.25);
        animation: fadeInUp 0.3s ease;
    }
    
    .modal-content h2,
    .modal-content .section-title,
    .modal-content span {
        font-size: 16-18px;
        font-weight: 600;
        color: #222;
        margin-bottom: 8px;
        display: block;
    }
    
    .modal-content h3 {
        font-size: 20px;
        font-weight: 600;
        color: #222;
        margin-bottom: 8px;
    }
    
    .modal-content hr {
        border: none;
        height: 1px;
        background: #e2e8f0;
        margin: 15px 0;
    }
    /* ------------------ Form Layout ------------------ */
    
    .modal-form {
        display: flex;
        flex-wrap: wrap;
        gap: 15px 20px;
        flex: 1;
    }
    
    .modal-input-group {
        display: flex;
        flex-direction: column;
        gap: 6px;
        flex: 1 1 200px;
        min-width: 150px;
        max-width: 280px;
    }
    
    .modal-input-group.full-width {
        flex: 1 1 100%;
        max-width: 100%;
    }
    
    .modal-input-group label {
        font-size: 14px;
        font-weight: 600;
        color: #333;
    }
    
    .modal-input-group input,
    .modal-input-group select,
    .modal-input-group textarea {
        padding: 8px 10px;
        font-size: 14px;
        border: 1px solid #cbd5e1;
        border-radius: 6px;
        background: #f9fafb;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }
    
    .modal-input-group input:focus,
    .modal-input-group select:focus,
    .modal-input-group textarea:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.15);
    }
    
    .modal-input-group textarea {
        resize: vertical;
        min-height: 80px;
        flex: 1 1 100%;
    }
    /* ------------------ Buttons ------------------ */
    
    .modal-buttons {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
        margin-top: 20px;
    }
    
    .modal-buttons .btn {
        padding: 8px 16px;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        border: none;
        transition: background 0.2s ease, transform 0.1s ease;
    }
    
    .btn-primary {
        background: #2563eb;
        color: white;
    }
    
    .btn-primary:hover {
        background: #1d4ed8;
        transform: translateY(-1px);
    }
    
    .btn-secondary {
        background: #e5e7eb;
        color: #111;
    }
    
    .btn-secondary:hover {
        background: #d1d5db;
    }
    /* ------------------ Detail Items ------------------ */
    
    .detail-row {
        display: flex;
        gap: 15px;
        margin-bottom: 15px;
    }
    
    .detail-item {
        flex: 1;
        display: flex;
        justify-content: space-between;
        padding: 10px 14px;
        border: 1px solid #cfd9df;
        border-radius: 8px;
        background: #fafafa;
        transition: all 0.2s ease;
    }
    
    .detail-item:hover {
        border-color: #74d9e8;
        background: #f0fcff;
    }
    
    .detail-item .label {
        font-weight: 600;
        font-size: 14px;
        color: #333;
    }
    
    .detail-item .value {
        font-size: 14px;
        font-weight: 400;
        color: #555;
        text-align: right;
        word-break: break-word;
    }
    
    .detail-item.full-width {
        flex: 1 1 100%;
        justify-content: flex-start;
        border-style: dashed;
    }
    
    .detail-item.full-width .value {
        text-align: left;
        margin-left: 5px;
    }
    /* ------------------ Misc ------------------ */
    
    hr {
        border: none;
        height: 3px;
        background-color: #ddca21;
        margin: 30px 0;
    }
    
    .intransit-div input[readonly],
    .intransit-div select:disabled,
    .intransit-div textarea[readonly],
    .Payment-div input[readonly],
    .Payment-div select:disabled,
    .Payment-div textarea[readonly] {
        background-color: #e0e0e0;
        color: #555;
        cursor: not-allowed;
    }
    
    .item-row {
        display: flex;
        align-items: flex-end;
        gap: 50px;
        margin-bottom: 10px;
        overflow-x: hidden;
    }
    
    .item-row .modal-input-group {
        flex: 1;
        display: flex;
        flex-direction: column;
    }
    
    .item-row .modal-input-group input,
    .item-row .modal-input-group select {
        width: 100%;
        padding: 6px 12px;
        font-size: 14px;
        border: 1px solid #cbd5e1;
        border-radius: 6px;
        background: #f9fafb;
    }
    
    .item-row .remove-btn {
        flex: 0 0 auto;
    }
    
    .item-row .remove-btn button {
        padding: 8px 12px;
        width: 40px;
        background: #e02b2b;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
    }
    
    .item-row .remove-btn button:disabled {
        background: #ccc;
        cursor: not-allowed;
    }
    /* ------------------ Animations ------------------ */
    
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(15px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    /* ------------------ Responsive: Table & Layout ------------------ */
    /* ✅ Tablet and large phones (<= 1024px) */
    
    @media (max-width: 1024px) {
        table,
        thead,
        tbody,
        tr,
        th,
        td {
            display: block;
            width: 100%;
            font-size: 13px;
        }
        thead {
            display: none;
        }
        tr {
            border: 1px solid #ddd;
            margin-bottom: 15px;
            border-radius: 6px;
            background-color: #fafafa;
            padding: 10px;
        }
        td {
            position: relative;
            padding-left: 40%;
            border: none;
            border-bottom: 1px solid #eee;
            box-sizing: border-box;
            text-align: left;
        }
        td::before {
            content: attr(data-label);
            position: absolute;
            top: 12px;
            left: 12px;
            width: 35%;
            font-weight: bold;
            white-space: nowrap;
            color: #333;
        }
        td:last-child {
            border-bottom: none;
        }
        .container {
            flex-direction: column;
            align-items: stretch;
        }
        .search-input,
        .add-btn {
            width: 50%;
            margin-left: 25%;
        }
        .search-input {
            max-width: 100%;
            /* allow full width */
            flex: 1 1 100%;
            /* take up full available width */
            min-width: auto;
            /* remove the fixed min-width */
        }
    }
    /* ✅ Small phones (<= 768px) */
    
    @media (max-width: 768px) {
        .main-content {
            margin-left: 150px;
            /* same as sidebar width */
            padding-left: 10px;
            /* optional, small padding */
        }
        .table-wrapper {
            margin-left: 50px;
        }
        .search-input {
            max-width: 100%;
            /* allow full width */
            flex: 1 1 100%;
            /* take up full available width */
            min-width: auto;
            /* remove the fixed min-width */
        }
        /* Hide all page buttons except first and last (prev and next) */
        .pagination button.page-btn:not(:first-child):not(:last-child) {
            display: none;
        }
        /* Style prev and next buttons for better tapping */
        .pagination button.page-btn:first-child,
        .pagination button.page-btn:last-child {
            min-width: 44px;
            height: 44px;
            font-size: 15px;
            padding: 0 12px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
        .pagination {
            display: flex;
            justify-content: center;
            gap: 8px;
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }
        .modal-input-group {
            flex: 1 1 calc(33.333% - 13.33px);
            /* 3 per row, subtract gap */
            min-width: 0;
            /* allow shrinking */
        }
        /* Keep large fields full width (like textarea for remarks) */
        .modal-input-group textarea,
        .modal-input-group.full-width {
            flex: 1 1 100%;
        }
        label {
            font-size: 10px;
        }
    }
    /* ✅ Extra small phones (<= 480px) */
    
    @media (max-width: 480px) {
        table,
        td {
            font-size: 11px;
        }
        td::before {
            font-size: 11px;
        }
        .search-input {
            max-width: 100%;
            /* allow full width */
            flex: 1 1 100%;
            /* take up full available width */
            min-width: auto;
            /* remove the fixed min-width */
        }
        /* ======================================================================================== */
        .modal {
            position: fixed;
            inset: 0;
            background: rgba(250, 128, 128, 0.6);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1050;
            padding: 15px;
            box-sizing: border-box;
            overflow-y: auto;
        }
        .modal-content {
            background: #fff;
            border-radius: 8px;
            width: 70%;
            max-width: 900px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }
        .modal-actions {
            display: flex;
            justify-content: space-between;
            /* title left, buttons right */
            align-items: center;
            /* vertically center */
            padding: 12px 16px;
            border-bottom: 1px solid #ddd;
            box-sizing: border-box;
            gap: 10px;
        }
        .main-modal-title {
            margin: 0;
            font-size: 18px;
            font-weight: bold;
        }
    }
